//  loop.js

// 반복문
// js 에서는 총3개의 반복문이 있다(for, while)

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //


// for 반복{
// for(초기식; 조건식; 증감식) {
//조건식이 true일 경우 빈복할 코드
//}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

// for 반
// for(변수 in 변수)
// in 뒤에있는 변수의 경우 array 등 iterable 값이 저장된 변수를 입력

// var test = ("Kim", "Park", "Jeong", "Yang")
// for(let value of test) {
//     console.log(value);
// }

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //

// for 반복
// for(변수 in 변수)
// in 뒤에 있는 변수의 경우\

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //

// Dictionary
// 키와 값으로 구분, {} 기호로 표시
// 값 참조의 경우 key를 사용, index 라는 순서개면이 없으며, key를 숫자로 하지는 않음(index와 혼동될 수 있기 때문)

//  var dic = {"class": 5, "age":18, "name":"Kim"}
//  console.log(dic["class"])

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //

//for 반복
// for (변수 in 변수)
// in 뒤에 있는 변수의 경우 딕셔너리 등을 사용, 뒤에 있는 변수의 번호를 앞에 있는 변수에 놓어서 반복

// var dic = { class: 5, age: 18, name: "Kim"};
// for(let key in dic) {
//     console.log(key, dic[key])
// }

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //

// while 반복
// while의 경우 조건과 같이 조건이 true일 경우 코드를 반복
// while (조건식) {
//    조건식 true일 경우 빈복할 경우
// }

// var i = 0;
// while(i < 5) {
//     console.log(i)
//     i++;                   // 증감식, 증감식이 없으면 무한반복이 되므로 중요
// }

// while 반복
// do {
// } while(조건식);
// 위 반복의 경우 조건식이 false여도 무조건 한번은 반복하는 반복문

// var a = 0;
// do{
//     console.log(a);
// } while (a !=0);         // 조건식이 false이지만 무조건 한본은 반복

// 무한반복, continue, break
// 무한반복이란 말 그대로 무한 반복하는 반복문 for, while 둘다 무한 반복 가능 
// continue, break의 경우 반복문 내부에 사용하는 것
// continue의 경우 만나는 순간 ㅂ로 다음 반복으로 이동
// break의 경우 만나는 순간 바로 반복문 종료
// continue와 break의 경우 둘다 if와 같이 사용

// var cnt = 0;
// for(;;){
//     cnt++;

//     if(cnt== 3){
//         continue;
//     }

//     if(cnt== 5){
//         break;
//     }

//     console.log(cnt);
// }

// var c = 0;
// while(true){
//     c++;

//     if(c==3) {
//         continue;
//     }

//     if(c == 5) {
//         break;
//     }

//     console.log(c);
// }

// +++++++++++++++++++++++++++++++++++++++++++++ //

// 중첩 반복문
// 중첩 반복문은 반복문 내부에 또 다른 반복문이 있는 것으로  2중첩, 3중첩 등이 있다.
// 실제로는 3중첩을 포함한 그 이상은 잘 사용했는데 그 이유는 너무 오래 걸림

// for(let i = 0; i < 10; i++) {  // 총 9번 반복
//     for(let j =0; j < 10; j++) {        // 총 81번 반복
//         console.log(i, "*", j, "=", i*j);
//     }
// }

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //

// for(let i = 0; i < 5; i++) {  
//     for(let j = 1; j <= i; j++) {   //각 라인의 번쩨와 똑같은 수의 별을 출력하기 위해 변수 사용
//         process.stdout.write('* ');  // 줄 바꿈 무시
//     }
//     console.log("*"); // 즐이 끝날때 마다 엔터
// }

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //

// for(let i =1; i< 10; i++) {
//     for(let j =1; j<= i; j++) {
//         console.log(i, "*", j, "=", i*j);
//     }
// }

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //